/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.67).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.capgemini.south_node_proxy.application.api;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.capgemini.south_node_proxy.domain.model.ErrResponse;
import com.capgemini.south_node_proxy.domain.model.ErrorInfo;
import com.capgemini.south_node_proxy.domain.model.InlineResponse4001;
import com.capgemini.south_node_proxy.domain.model.InlineResponse401;
import com.capgemini.south_node_proxy.domain.model.InlineResponse403;
import com.capgemini.south_node_proxy.domain.model.PostTrafficInfluenceDevice;
import com.capgemini.south_node_proxy.domain.model.TrafficInfluence;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.validation.Valid;

@Validated
public interface TrafficInfluenceDevicesApi {

    @Operation(summary = "Requests available zones based on new UE location", description = "", tags={ "Traffic Influence (Outgoing)" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "TrafficInfluence resource created, the related object is returned with the resource ID (trafficInfluenceID) and status (state) valorised.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = TrafficInfluence.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse4001.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse401.class))),
        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse403.class))),
        
        @ApiResponse(responseCode = "500", description = "An unknow error has occurred", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrResponse.class))),
        
        @ApiResponse(responseCode = "503", description = "Service unavailable. Typically the server is down", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorInfo.class))),
        
        @ApiResponse(responseCode = "504", description = "Connection timeout towards backend service has occurred", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrResponse.class))) })
    @RequestMapping(value = "/traffic-influence-devices",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<TrafficInfluence> postTrafficInfluenceDevice(@Parameter(in = ParameterIn.DEFAULT, description = "Describes the request body", required=true, schema=@Schema()) @Valid @RequestBody PostTrafficInfluenceDevice body
, @Parameter(in = ParameterIn.HEADER, description = "Correlation id for the different services" ,schema=@Schema()) @RequestHeader(value="x-correlator", required=false) String xCorrelator
);

}

