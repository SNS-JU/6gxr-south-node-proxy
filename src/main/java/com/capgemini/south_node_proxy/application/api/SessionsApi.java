/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.67).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.capgemini.south_node_proxy.application.api;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.capgemini.south_node_proxy.domain.model.CreateSession;
import com.capgemini.south_node_proxy.domain.model.InlineResponse400;
import com.capgemini.south_node_proxy.domain.model.InlineResponse401;
import com.capgemini.south_node_proxy.domain.model.InlineResponse403;
import com.capgemini.south_node_proxy.domain.model.InlineResponse404;
import com.capgemini.south_node_proxy.domain.model.InlineResponse409;
import com.capgemini.south_node_proxy.domain.model.InlineResponse422;
import com.capgemini.south_node_proxy.domain.model.InlineResponse429;
import com.capgemini.south_node_proxy.domain.model.SessionInfo;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.validation.Valid;

@Validated
public interface SessionsApi {

	@Operation(summary = "Creates a new session", description = "", tags = { "QoS Sessions (Incoming)" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "Session created", content = @Content(mediaType = "application/json", schema = @Schema(implementation = SessionInfo.class))),
			@ApiResponse(responseCode = "400", description = "Bad Request when creating a session", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse400.class))),
			@ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse401.class))),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse403.class))),
			@ApiResponse(responseCode = "404", description = "Not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse404.class))),
			@ApiResponse(responseCode = "409", description = "Conflict", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse409.class))),
			@ApiResponse(responseCode = "422", description = "Unprocessable Content", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse422.class))),
			@ApiResponse(responseCode = "429", description = "Too Many Requests", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse429.class))) })
	@RequestMapping(value = "/sessions-uc2", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	ResponseEntity<SessionInfo> sessionsUc2Post(
			@Parameter(in = ParameterIn.DEFAULT, description = "Parameters to create a new session", required = true, schema = @Schema()) @Valid @RequestBody CreateSession body,
			@Parameter(in = ParameterIn.HEADER, description = "Correlation id for the different services", schema = @Schema()) @RequestHeader(value = "x-correlator", required = false) String xCorrelator);

	@Operation(summary = "Creates a new session", description = "", tags = { "QoS Sessions (Incoming)" })
	@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "Session created", content = @Content(mediaType = "application/json", schema = @Schema(implementation = SessionInfo.class))),
			@ApiResponse(responseCode = "400", description = "Bad Request when creating a session", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse400.class))),
			@ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse401.class))),
			@ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse403.class))),
			@ApiResponse(responseCode = "404", description = "Not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse404.class))),
			@ApiResponse(responseCode = "409", description = "Conflict", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse409.class))),
			@ApiResponse(responseCode = "422", description = "Unprocessable Content", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse422.class))),
			@ApiResponse(responseCode = "429", description = "Too Many Requests", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse429.class))) })
	@RequestMapping(value = "/sessions-dynamicon", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	ResponseEntity<SessionInfo> sessionsDynamiconPost(
			@Parameter(in = ParameterIn.DEFAULT, description = "Parameters to create a new session", required = true, schema = @Schema()) @Valid @RequestBody CreateSession body,
			@Parameter(in = ParameterIn.HEADER, description = "Correlation id for the different services", schema = @Schema()) @RequestHeader(value = "x-correlator", required = false) String xCorrelator);

}
